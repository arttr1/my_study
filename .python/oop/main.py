# print(ord('А'))
# s = input("/// ")
# a = []
# for i in s:
# a.append(ord(i))


# c = []
# b = ['d2','f0','f3','f8','e8','ed','c0','f0','f2','b8','ec','cb','e5','ee','ed','e8','e4','ee','e2','e8','f7']
# for i in b:
    # c.append(int(i.upper(), 16))
# print(*c)
# фио
# 210 240 243 248 232 237 192 240 242 184 236 203 229 238 237 232 228 238 226 232 247 win-1251
# 1058 1088 1091 1096 1080 1085 1040 1088 1090 1105 1084 1051 1077 1086 1085 1080 1076 1086 1074 1080 1095 utf-16

# ========================================================================

# b = " "
# b=bytes(b,"koi8-r")
# print(b)
# c = []
# s = ['eb','cf','ce','c6','c9','c7','d5','d2','c1','c3','c9','d1']
# for i in s:
#     c.append(int(i.upper(), 16))
# print(*c)

# cp866
# Среда разработки 145 224 165 164 160 32 224 160 167 224 160 161 174 226 170 168 
# Конфигурация 138 174 173 228 168 163 227 224 160 230 168 239

# koi-8
# Среда разработки 243 210 197 196 193 154 210 193 218 210 193 194 207 212 203 201
# Конфигурация 235 207 206 198 201 199 213 210 193 195 201 209

# ========================================
# a = list(map(str, input().split()))
a = ['145', '170', '174', '224', '174', '255', '170', '160', '173', '168', '170', '227', '171', '235' ]
# print(a)
# s = ''
# for i in range(len(a)):
#     a[i] = hex(int(a[i]))
#     s+=( a[i] + ',')
# print(s)
# print(a[0].decode('cp866'))



# byte_string = bytes([0x91,0xaa,0xae,0xe0,0xae,0xff,0xaa,0xa0,0xad,0xa8,0xaa,0xe3,0xab,0xeb])
# decoded_string = byte_string.decode('cp866')
# print(decoded_string)


# '88', 'ad', 'e4','ae', 'e0', 'ac', 'a0', 'e2', 'a8', 'aa', 'ao' ифнорматика
# '50', '72', '6f', '67', '72', '61', '6d' Program
# '43', '6f', '6d', '70', '75', '74', '65', '72', '20', '49', '42', '4d', '20', '50', '43' Computer IBM PC
# '145', '170', '174', '224', '174', '255', '170', '160', '173', '168', '170', '227', '171', '235' Скоро каникулы


# import pandas as pd

# # Исправленные данные для таблицы (на основе предоставленного изображения)
# data = {
#     'Рисунок': ['Домик', 'Домик2', 'Домик2', 'Домик3'],
#     'Разрешение экрана (К)': ['640*480', '640*480', '320*240', '640*480'],
#     'Тип рисунка (Цвет, Ч/Б)': ['Ч/Б', 'Цвет', 'Цвет', 'Цвет'],
#     'Глубина цвета (i) (бит на точку)': [24, 24, 24, 16],
#     'Размер файла *.jpg': ['', '', '', ''],
#     'Размер файла *.bmp': ['', '', '', ''],
#     'Объем видеопамяти (I = K * i) (Кбайт)': ['', '', '', '']
# }

# # Создание DataFrame
# df = pd.DataFrame(data)

# # Вычисление объема видеопамяти в Кбайтах
# def calculate_memory(resolution, depth):
#     width, height = map(int, resolution.split('*'))
#     depth_bytes = depth / 8  # Преобразование бит в байты
#     total_bytes = width * height * depth_bytes
#     return total_bytes / 1024  # Преобразование байтов в Кбайты

# # Применение вычислений для заполнения столбца 'Объем видеопамяти'
# df['Объем видеопамяти (I = K * i) (Кбайт)'] = df.apply(lambda row: calculate_memory(row['Разрешение экрана (К)'], row['Глубина цвета (i) (бит на точку)']), axis=1)

# # Сохранение в Excel
# file_name = 'table.xlsx'
# df.to_excel(file_name, index=False)

# print(f"Файл сохранен как {file_name}")

# s = 'четыре пять'
# bytes = s.encode('cp1251')
# int_bytes = int.from_bytes(bytes, 'little')
# print(int_bytes)
# print(int('f7', 16))
# print(str(bytes)[2:-1])


# s = 'f7 e5 f2 fb f0 e5 ef ff f2 fc'
# a = s.split()
# for i in a:
#     print(int(i, 16), end=' ')


s = '1095 1077 1090 1099 1088 1077 32 1087 1103 1090 1100'
a = s.split()
for i in a:
    print(bin(int(i))[2:],end=' ' )